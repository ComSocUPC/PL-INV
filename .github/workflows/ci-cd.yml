name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Job para validar c√≥digo y est√°ndares
  validate:
    name: üîç Validate Code & Standards
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Lint code
      run: npm run lint
      
    - name: Validate OpenAPI specs
      run: npm run validate:api-specs
      
    - name: Check commit messages
      if: github.event_name == 'pull_request'
      run: npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }}

  # Job para pruebas unitarias
  unit-tests:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    needs: validate
    
    strategy:
      matrix:
        service: [api-gateway, auth-service, product-service, inventory-service, iot-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd 2-backend/${{ matrix.service }}
        npm ci
        
    - name: Run unit tests
      run: |
        cd 2-backend/${{ matrix.service }}
        npm test -- --coverage --watchAll=false
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./2-backend/${{ matrix.service }}/coverage/lcov.info
        flags: ${{ matrix.service }}

  # Job para pruebas de contrato
  contract-tests:
    name: ü§ù Contract Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: inventory_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run contract tests
      run: npm run test:contract
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/inventory_test
        REDIS_URL: redis://localhost:6379
        
    - name: Publish Pact contracts
      if: github.ref == 'refs/heads/main'
      run: npm run pact:publish
      env:
        PACT_BROKER_BASE_URL: ${{ secrets.PACT_BROKER_BASE_URL }}
        PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}

  # Job para pruebas de integraci√≥n
  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Start services
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30
        
    - name: Wait for services to be ready
      run: |
        npx wait-on http://localhost:3001/health --timeout 60000
        npx wait-on http://localhost:3002/health --timeout 60000
        npx wait-on http://localhost:3003/health --timeout 60000
        npx wait-on http://localhost:3004/health --timeout 60000
        npx wait-on http://localhost:3005/health --timeout 60000
        
    - name: Run integration tests
      run: npm run test:e2e
      
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-videos
        path: cypress/videos
        
    - name: Upload screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: cypress/screenshots
        
    - name: Stop services
      if: always()
      run: docker-compose -f docker-compose.test.yml down

  # Job para pruebas de carga
  load-tests:
    name: ‚ö° Load Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Start services
      run: |
        docker-compose up -d
        sleep 60
        
    - name: Run load tests
      run: npm run test:load
      
    - name: Upload load test results
      uses: actions/upload-artifact@v3
      with:
        name: load-test-results
        path: tests/load/results/

  # Job para an√°lisis de seguridad
  security:
    name: üîí Security Analysis
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm run security:audit
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Job para build y push de im√°genes Docker
  build-images:
    name: üê≥ Build & Push Images
    runs-on: ubuntu-latest
    needs: [contract-tests, integration-tests]
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [api-gateway, auth-service, product-service, inventory-service, iot-service, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/inventory-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Backend Services
      if: matrix.service != 'frontend'
      uses: docker/build-push-action@v5
      with:
        context: ./2-backend/${{ matrix.service }}
        file: ./2-backend/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Frontend
      if: matrix.service == 'frontend'
      uses: docker/build-push-action@v5
      with:
        context: ./1-frontend
        file: ./1-frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job para deployment
  deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-latest
    needs: [build-images, load-tests, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check deployment readiness
      run: npm run pact:can-deploy
      env:
        PACT_BROKER_BASE_URL: ${{ secrets.PACT_BROKER_BASE_URL }}
        PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}
        
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production..."
        # Aqu√≠ ir√≠an los comandos espec√≠ficos de deployment
        # Por ejemplo: kubectl apply, docker-compose up en servidor, etc.
        
    - name: Health check
      run: |
        echo "üè• Running health checks..."
        # Verificar que todos los servicios est√©n funcionando
        
    - name: Notify deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: |
          Deployment ${{ job.status }}!
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
